# Copy this file to digger.ini, and make the appropriate
# changes below.
# Digger looks for digger.ini in these locations, in order:
# current directory, EXE directory, source directory,
# ~/.digger/digger.ini, and, on Posix systems,
# /etc/digger.ini.

# Working directory.
# This directory will contain all of Digger's working files:
# the D repositories, any build prerequisites obtained
# automatically, the current build output, and the cache, if
# enabled.
# Please specify an absolute path. The default is to use the
# current directory.

workDir = /output

# Build cache.
# To speed up successive runs, Digger can save the results of
# each commit's build. The downside is that this uses up disk
# space. The following cache engines are available:
# - none       No persistent cache.
# - directory  Store built files in a directory tree.
#              Saves some disk space by hard-linking identical
#              files.
# - git        Use a git repository (and git's deduplication /
#              compression mechanisms). Uses much less disk
#              space than "directory", but is a little slower.
# You can periodically run "digger compact" to optimize disk
# space used by the cache.

# cache = git

# Build/test environment.
# By default, Digger completely clears the environment and
# builds a new one from scratch, to avoid potential sources
# of contamination that can affect the D builds or test results.
# The environment is calculated in this order:
# 1. Clear entirely
# 2. Build minimal environment
# 3. Apply digger.ini settings
# 4. Apply bisect.ini settings, if we are bisecting
# Step 4 is only applied during the execution of the test command.
[environment]

# You can use %VAR% syntax to refer to the previous value of a
# variable, or if there wasn't one, to the value from the
# original environment (before it was cleared and rebuilt).

# Examples:

# Add something to PATH
#PATH=%PATH%;C:\Tools

# Import PATHEXT from the original environment
#PATHEXT=%PATHEXT%